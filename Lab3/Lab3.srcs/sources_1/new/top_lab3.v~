`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 01/26/2024 02:03:00 PM
// Design Name: 
// Module Name: top_lab3
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module top_lab3(
    input clkin,
    input btnR,
    input btnU,
    input btnC,
    input btnL,
    input [15:0] sw,
    output [6:0] seg,
    output dp,
    output [3:0] an,
    output [15:0] led
    );
    wire btnc;
    FDRE #(.INIT(1'b0)) btnCCount (.C(clk), .CE(1'b1), .D(btnC), .Q(btnc); //btnc only activates with clock edge
    wire btnCEnable;
    assign btnCEnable = btnc | &(Q&!(15'7FFC); //checks that Q < 77FC

    EdgeDetector edgeDetect(.btnU(btnU), .clk(clk), .out(edge));

    wire upDown, load;
    FDRE #(.INIT(1'b0)) btnCCount (.C(clk), .CE(1'b1), .D(sw[0]), .Q(upDown); //UD only activates with clock edge
    FDRE #(.INIT(1'b0)) btnCCount (.C(clk), .CE(1'b1), .D(btnL), .Q(load); //LD only activates with clock edge
    wire [15:0] out;
    countUD15L counter(.CE(btnCEnable | edge), .UD(upDown), .LD(load), .clk(clk), .Din(sw), .UTC(led[15]), DTC(led[0]), .Q(out));

    wire edge;
    wire [0:3] select, num;
    labCnt_clks slowit(.clkin(clkin), .greset(btnR), .clk(clk), .digsel(digsel));
    RingCounter ring(.Advance(digsel), .clk(clk), .out(select));
    Selector selector(.sel(select), .N(led), .H(num));
    hex7seg(.n(num), .leds(seg));
    assign an[0] = !(select ^ 4'b1000); 
    assign an[1] = !(select ^ 4'b0100); 
    assign an[2] = !(select ^ 4'b0010); 
    assign an[3] = !(select ^ 4'b0001); 
endmodule
